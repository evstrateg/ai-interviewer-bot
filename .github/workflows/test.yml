name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        test-type: ['unit', 'integration']
        include:
          - python-version: '3.11'
            test-type: 'performance'
          - python-version: '3.11' 
            test-type: 'real-api'
            real-api: true

    name: Python ${{ matrix.python-version }} - ${{ matrix.test-type }} tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy voice_handler.py --ignore-missing-imports || true

    - name: Run unit tests
      if: matrix.test-type == 'unit'
      run: |
        pytest test_assemblyai_integration.py -v -m "not integration and not performance and not real_api" \
          --cov=voice_handler \
          --cov-report=xml \
          --cov-report=term-missing \
          --timeout=300

    - name: Run integration tests (mocked)
      if: matrix.test-type == 'integration'
      run: |
        pytest test_assemblyai_integration.py -v -m "integration and not real_api" \
          --cov=voice_handler \
          --cov-report=xml \
          --cov-report=term-missing \
          --timeout=600

    - name: Run performance tests
      if: matrix.test-type == 'performance'
      run: |
        pytest test_assemblyai_integration.py -v -m "performance" \
          --timeout=900

    - name: Run real API integration tests
      if: matrix.real-api == true
      env:
        ASSEMBLYAI_API_KEY: ${{ secrets.ASSEMBLYAI_API_KEY }}
        ASSEMBLYAI_INTEGRATION_TESTS: 'true'
      run: |
        if [ -n "$ASSEMBLYAI_API_KEY" ]; then
          pytest test_assemblyai_integration.py -v -m "real_api" \
            --timeout=1200 || echo "Real API tests failed, continuing..."
        else
          echo "ASSEMBLYAI_API_KEY not set, skipping real API tests"
        fi

    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit' || matrix.test-type == 'integration'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-compatibility:
    runs-on: ubuntu-latest
    name: Test compatibility and dependencies
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Test installation without optional dependencies
      run: |
        pip install --upgrade pip
        # Test core dependencies only
        pip install python-telegram-bot anthropic python-dotenv structlog pytest pytest-asyncio
        python -c "import telegram; import anthropic; print('Core dependencies work')"
    
    - name: Test with all dependencies
      run: |
        pip install -r requirements.txt
        python -c "import assemblyai; import pydub; print('All dependencies work')"
    
    - name: Test import of main modules
      run: |
        python -c "from voice_handler import VoiceMessageHandler, create_voice_handler; print('Voice handler imports work')"
        python -c "from config import BotConfig; print('Config imports work')"

  security-check:
    runs-on: ubuntu-latest
    name: Security and code quality checks
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
    
    - name: Run bandit security check
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || echo "Security issues found, check bandit-report.json"
    
    - name: Check dependencies for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check || echo "Vulnerabilities found, check safety-report.json"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  test-docker:
    runs-on: ubuntu-latest
    name: Test Docker build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create test Dockerfile
      run: |
        cat > Dockerfile.test << EOF
        FROM python:3.11-slim
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \\
            ffmpeg \\
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /app
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        COPY . .
        
        # Run tests
        CMD ["pytest", "test_assemblyai_integration.py", "-v", "-m", "not real_api", "--timeout=600"]
        EOF
    
    - name: Build and test Docker image
      run: |
        docker build -f Dockerfile.test -t voice-handler-test .
        docker run --rm voice-handler-test || echo "Docker tests completed with issues"